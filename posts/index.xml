<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Error:Eutopia</title>
        <link>https://examnple.com/posts/</link>
        <description>Recent content in Posts on Error:Eutopia</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>Error Eutopia</copyright>
        <lastBuildDate>Mon, 15 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://examnple.com/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>去年今天</title>
        <link>https://examnple.com/posts/%E5%8E%BB%E5%B9%B4%E4%BB%8A%E5%A4%A9/</link>
        <pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://examnple.com/posts/%E5%8E%BB%E5%B9%B4%E4%BB%8A%E5%A4%A9/</guid>
        <description>&lt;p&gt;2023-01-16
&lt;img src=&#34;https://examnple.com/images/Screenshot_20230116_200653.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20230116&#34;
	
	
&gt;
2024-01-16
&lt;img src=&#34;https://examnple.com/images/20240116.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;20240116&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Gal从ZERO到HERO的Renpy开发教程</title>
        <link>https://examnple.com/posts/gal/</link>
        <pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://examnple.com/posts/gal/</guid>
        <description>&lt;h1 id=&#34;人物对话与图像&#34;&gt;
    &lt;a href=&#34;#%e4%ba%ba%e7%89%a9%e5%af%b9%e8%af%9d%e4%b8%8e%e5%9b%be%e5%83%8f&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    人物对话与图像
&lt;/h1&gt;&lt;p&gt;首先下载好renpy引擎及其资源如果没有点此链接: &lt;a class=&#34;link&#34; href=&#34;https://galgame.dev/topic/267/ren-py%e8%b5%84%e6%ba%90&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ren-py资源&lt;/a&gt;
打开引擎后就是这个样子:
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704785784447-f7464c66-fa3e-434c-87c3-316b86078add-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;分支头看的懂英语可以跳过此处&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e6%94%af%e5%a4%b4%e7%9c%8b%e7%9a%84%e6%87%82%e8%8b%b1%e8%af%ad%e5%8f%af%e4%bb%a5%e8%b7%b3%e8%bf%87%e6%ad%a4%e5%a4%84&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;em&gt;分支头:看的懂英语可以跳过此处&lt;/em&gt;
&lt;/h2&gt;&lt;p&gt;首先点击右下角的preferences
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784399573-6ce61000-3170-480d-9597-882fb9940987-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
再点击中文(或者任意你喜欢的语言),后期教程以中文界面为主
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784433132-dd5f90db-64d4-4052-9ea5-859f7f0d59c6-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;分支尾看的懂英语可以跳过此处&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e6%94%af%e5%b0%be%e7%9c%8b%e7%9a%84%e6%87%82%e8%8b%b1%e8%af%ad%e5%8f%af%e4%bb%a5%e8%b7%b3%e8%bf%87%e6%ad%a4%e5%a4%84&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;em&gt;分支尾:看的懂英语可以跳过此处&lt;/em&gt;
&lt;/h2&gt;&lt;h2 id=&#34;项目的创建&#34;&gt;
    &lt;a href=&#34;#%e9%a1%b9%e7%9b%ae%e7%9a%84%e5%88%9b%e5%bb%ba&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    项目的创建
&lt;/h2&gt;&lt;p&gt;让我们返回到主菜单,点击&amp;quot;创建新项目&amp;quot;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784475550-87bcf604-84e8-4da2-be98-6314df947203-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
点击&amp;quot;继续&amp;quot;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784509950-91ba47f7-f812-4b17-a8f6-02d7a1161c11-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
输入项目名称,我们这里叫:&amp;ldquo;Eutopia RenPy Journey&amp;rdquo;(名称不可以输入不再ASCII内的字符,关于ASCII,有兴趣自行搜索)
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784606048-4fa1cefb-2777-4f34-bb2d-9c2cdc705ffe-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
点击继续,以及后面两个都保持为默认,点击继续
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784636340-b204dbed-338e-413e-83d7-10c3844f53f9-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784672040-e0122d99-a892-4ab2-86fe-ce28458c2e11-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
稍等片刻后我们会返回到主菜单
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784690018-7dce1f2a-f931-4074-9628-b5ee4892f1da-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
箭头所指的便是我们新建的项目
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784763005-2f3f2b9e-dc65-482e-86a2-617ae5ee5413-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
让我们启动项目试试看
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784816752-f8247022-b2e2-4181-a2b5-b76b9699ec3a-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
右下角是我们的游戏名称,左边是我们的游戏菜单(虽然现在很丑,但后面会美化的)
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784877477-718b2bdf-7494-4e96-a79a-a379695e90e7-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
点击开始游戏试试看
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784911464-649493cf-29a9-4c99-b20f-ab703a10f83e-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784928533-d594e473-abd0-4e3d-baa3-43799018b225-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
点击两次后便会返回游戏主界面
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704784956515-84baa8e4-df58-45d4-8d95-d5237f3692cc-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;tips接下来需要写代码了请各位阁下做好心理准备&#34;&gt;
    &lt;a href=&#34;#tips%e6%8e%a5%e4%b8%8b%e6%9d%a5%e9%9c%80%e8%a6%81%e5%86%99%e4%bb%a3%e7%a0%81%e4%ba%86%e8%af%b7%e5%90%84%e4%bd%8d%e9%98%81%e4%b8%8b%e5%81%9a%e5%a5%bd%e5%bf%83%e7%90%86%e5%87%86%e5%a4%87&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;em&gt;Tips:接下来需要写代码了,请各位阁下做好心理准备!&lt;/em&gt;
&lt;/h4&gt;&lt;p&gt;Ok,相信大家都做好了准备,接下来就是愉快的代码编写时间!&lt;/p&gt;
&lt;p&gt;先回到主界面,看到右上角一个名为script.rpy的脚本文件吗？
点击它,就可以跳转到&amp;hellip;&amp;hellip;什么?你没跳转?那就跟着下面图片去配置吧!&lt;/p&gt;
&lt;h3 id=&#34;分支头2可以跳转的跳过&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e6%94%af%e5%a4%b42%e5%8f%af%e4%bb%a5%e8%b7%b3%e8%bd%ac%e7%9a%84%e8%b7%b3%e8%bf%87&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    分支头2,可以跳转的跳过
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704785027422-b47369f1-de65-4afe-9f98-175c1b1459e5-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704785055944-59277599-8083-44cb-a23a-876246a369fd-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704785077674-68bcce21-e3ec-44c6-b37e-19c64fa0e573-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;自行选择一个你喜欢的编辑器吧!&lt;/p&gt;
&lt;h3 id=&#34;分支尾2可以跳转的跳过&#34;&gt;
    &lt;a href=&#34;#%e5%88%86%e6%94%af%e5%b0%be2%e5%8f%af%e4%bb%a5%e8%b7%b3%e8%bd%ac%e7%9a%84%e8%b7%b3%e8%bf%87&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    分支尾2,可以跳转的跳过
&lt;/h3&gt;&lt;p&gt;这是文件中的代码:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 游戏的脚本可置于此文件中。                                                  
                     
# 声明此游戏使用的角色。颜色参数可使角色姓名着色。
                     
define e = Character(&amp;#34;艾琳&amp;#34;)
                     
                     
# 游戏在此开始。     
                     
label start:         
                     
    # 显示一个背景。此处默认显示占位图，但您也可以在图片目录添加一个文件
    # （命名为 bg room.png 或 bg room.jpg）来显示。
                     
    scene bg room    
                     
    # 显示角色立绘。此处使用了占位图，但您也可以在图片目录添加命名为
    # eileen happy.png 的文件来将其替换掉。
                     
    show eileen happy
                     
    # 此处显示各行对话。
                     
    e &amp;#34;您已创建一个新的 Ren&amp;#39;Py 游戏。&amp;#34;
                     
    e &amp;#34;当您完善了故事、图片和音乐之后，您就可以向全世界发布了！&amp;#34;
                     
    # 此处为游戏结尾。
    return           
                                                                              
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看上去复杂吗？其实就光凭这个注释就可以明白大半了
但是,我们还是一步一步来比较好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h3 id=&#34;首先一个普通的gal需要角色&#34;&gt;
    &lt;a href=&#34;#%e9%a6%96%e5%85%88%e4%b8%80%e4%b8%aa%e6%99%ae%e9%80%9a%e7%9a%84gal%e9%9c%80%e8%a6%81%e8%a7%92%e8%89%b2&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    首先,一个普通的gal需要角色
&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;Q:如何创建一个角色?&lt;/li&gt;
&lt;li&gt;A:define [随便一个字符串,用来代表你的角色,每个角色需要有一个唯一的字符串!&lt;code&gt;在下文用&amp;quot;e&amp;quot;表示&lt;/code&gt;] = Character (&amp;ldquo;你的角色名&amp;rdquo;)
Tips:编写代码时需要注意大小写,缩进,以及符号(必须为英文字符!)&lt;/li&gt;
&lt;li&gt;Q:如何让角色说话?&lt;/li&gt;
&lt;li&gt;A:e &amp;ldquo;你想让角色说的话&amp;rdquo;
Tips:在Ren&amp;rsquo;py中游戏会从&amp;quot;label start:&amp;ldquo;开始,角色说话时注意缩进!最好以空格代替Tab键!&lt;/li&gt;
&lt;li&gt;Q:我想显示我角色(laopo)的立绘,该怎么写?&lt;/li&gt;
&lt;li&gt;A:这个有点小麻烦,首先你需要一张图片,把它放在游戏项目的images目录,(名称最好英文全小写,根据机制,文件名在代码编写的时候会强制改为小写并剔除扩展名。譬如我有一张名为Mypic.png的图片,在写代码时需要全小写,也就是&amp;quot;mypic&amp;rdquo;)show [文件名]&lt;/li&gt;
&lt;li&gt;Q：默认背景好难看，怎么更换背景？&lt;/li&gt;
&lt;li&gt;A：同上，只不过需要将show改为scene&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;代码实践&#34;&gt;
    &lt;a href=&#34;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e8%b7%b5&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    代码实践
&lt;/h3&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#在文本前面加&amp;#34;#&amp;#34;叫做注释，注释不会被引擎运行——所以你可以在这里夹杂私货[笑]
#好吧，事实上这个是用来备忘的，一些复杂的项目的代码时间久了你有可能会记不住你写的是什么，这时注释就起到作用了
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#创建一个角色Eutopia

define t = Character (&amp;#34;Eutopia&amp;#34;)

#游戏开始的地方

label start:
    
    #这是一个背景,图片名称Utopia,别忘了小写
    scene utopia
    
    #角色立绘,图片名称Eutopia
    show eutopia
    
    t &amp;#34;基本上就是这样&amp;#34;
    t &amp;#34;让我们运行看看&amp;#34;
    
    #游戏在此结束
    return
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;左代码,右程序
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704829922606-3cccfffc-8e56-400f-9a46-174f3c034a80-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704829951846-b32eba51-31d5-4b83-894e-ac025e286719-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;图像的基本运用&#34;&gt;
    &lt;a href=&#34;#%e5%9b%be%e5%83%8f%e7%9a%84%e5%9f%ba%e6%9c%ac%e8%bf%90%e7%94%a8&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    图像的基本运用
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;头像设置&lt;/li&gt;
&lt;li&gt;图像的移动与位置&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;头像设置
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704970326220-da2eec49-491c-4f14-a988-61ae3848de6f-image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
这是肥肠简单的一个办法:在image后面加一个side就行了,其余与立绘一样&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;image side eutopia=&amp;#34;eutopia-h.png&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;em&gt;这里头像资源文件名叫eutopia-h.png,你也可以使用其他的,最好是透明png格式&lt;/em&gt;
2. 图像的移动与位置&lt;/p&gt;
&lt;h3 id=&#34;eutopia换装ing&#34;&gt;
    &lt;a href=&#34;#eutopia%e6%8d%a2%e8%a3%85ing&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    &lt;del&gt;eutopia换装ing&amp;hellip;&lt;/del&gt;
&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704971423536-3a0f103a-c9c6-4202-9a28-d6dbdb2703a6-image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
[renpy默认位置是中间,具体写法请查看前面立绘部分]
这时,如果我们想让她出现在左或者右边该怎么写呢？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;show eutopia at left #出现在左
show eutopia at right #出现在右
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;出现在左:
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704971890619-83fe7d15-75b1-44ac-a946-9ef2f3eec40f-image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
出现在右:
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704971988426-0e7f74dc-0988-416e-831d-129d2dc4b0c0-image.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;附页&#34;&gt;
    &lt;a href=&#34;#%e9%99%84%e9%a1%b5&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    附页
&lt;/h5&gt;&lt;p&gt;&lt;em&gt;Tips:文件夹结构图&lt;/em&gt;
&lt;img src=&#34;https://galgame.dev/assets/uploads/files/1704825226932-6882b6c9-03c7-4895-af51-fd735ba7e1b7-%e5%9b%be%e7%89%87.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;em&gt;images:存放图片
gui:存放游戏界面资源
audio:存放音频文件
tl:翻译文件
saves:游戏存档文件
cache:缓存文件&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>喵帕斯~</title>
        <link>https://examnple.com/posts/gugu/</link>
        <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://examnple.com/posts/gugu/</guid>
        <description>&lt;p&gt;从前有一只鸽子前来咕咕:
咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕咕&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Linux打包流程 For wine Appimage</title>
        <link>https://examnple.com/posts/linux/</link>
        <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://examnple.com/posts/linux/</guid>
        <description>&lt;h5 id=&#34;首先感谢一下linuxgamecn提供的标准化打包工具&#34;&gt;
    &lt;a href=&#34;#%e9%a6%96%e5%85%88%e6%84%9f%e8%b0%a2%e4%b8%80%e4%b8%8blinuxgamecn%e6%8f%90%e4%be%9b%e7%9a%84%e6%a0%87%e5%87%86%e5%8c%96%e6%89%93%e5%8c%85%e5%b7%a5%e5%85%b7&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    首先,感谢一下linuxgame.cn提供的标准化打包工具
&lt;/h5&gt;&lt;h5 id=&#34;再感谢一下shinnkucom的gal&#34;&gt;
    &lt;a href=&#34;#%e5%86%8d%e6%84%9f%e8%b0%a2%e4%b8%80%e4%b8%8bshinnkucom%e7%9a%84gal&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    再感谢一下shinnku.com的Gal
&lt;/h5&gt;&lt;p&gt;(笑)
请让我把工具准备好:
一个Linux发行版(WSL也可以),我选用的是KaliLinux
Appimagetool(Github上有)&lt;/p&gt;
&lt;p&gt;以及来自linuxgame网站的打包工具 &lt;a class=&#34;link&#34; href=&#34;https://github.com/Gamuxorg/prebuilt-game-package-tool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接&lt;/a&gt;{自带旧版本appimagetool以及wine依赖,但我们不需要}&lt;/p&gt;
&lt;p&gt;记得下好游戏并成功运行在本机wine环境上&lt;/p&gt;
&lt;p&gt;以及打包的灵魂:wine (可从archlinux包仓库或者debian包仓库获得)
&lt;img src=&#34;https://examnple.com/images/6x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;6x.png&#34;
	
	
&gt;
这里我们演示的是&amp;hellip;&amp;hellip; GINKA !
&lt;img src=&#34;https://examnple.com/images/0x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;0x.png&#34;
	
	
&gt;
成品演示:
&lt;img src=&#34;https://examnple.com/images/7x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;7x.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;在开始之前我觉得我得解释一下wine是什么&#34;&gt;
    &lt;a href=&#34;#%e5%9c%a8%e5%bc%80%e5%a7%8b%e4%b9%8b%e5%89%8d%e6%88%91%e8%a7%89%e5%be%97%e6%88%91%e5%be%97%e8%a7%a3%e9%87%8a%e4%b8%80%e4%b8%8bwine%e6%98%af%e4%bb%80%e4%b9%88&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    在开始之前,我觉得我得解释一下,Wine是什么
&lt;/h5&gt;&lt;p&gt;Wine （“&lt;em&gt;Wine Is Not an Emulator&lt;/em&gt;” 的首字母缩写）是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，macOS 及 BSD 等）上运行 Windows 应用的兼容层。Wine 不是像虚拟机或者模拟器一样模仿内部的 Windows 逻辑，而是將 Windows API 调用翻译成为动态的 POSIX 调用，免除了性能和其他一些行为的内存占用，让你能够干净地集合 Windows 应用到你的桌面。&lt;/p&gt;
&lt;p&gt;Wine 项目由 Bob Amstadt 于 1993 年发起，旨在寻求一种在 Linux 上运行 Windows 3.1 程序的办法。不久之后，Alexandre Julliard 开始接手领导 Wine 的开发，从此由他管理这个项目。 多年以来，随着 Windows API 和应用为了适应新硬件及软件而不断演变，Wine 也一直不断发展来支持新的特性，移植到更多其他系统，并且更加稳定，提供着更好的用户体验。&lt;/p&gt;
&lt;p&gt;通过确立一个宏伟的目标，在 2008 年项目到达 v1.0 之前，Wine 一直稳健地持续了 15 年之久，那是第一个稳定版。 多个版本以后，虽然还有许多工作要做，但今天 Wine 仍然在活跃地开发着。 并且有大约数以百万人计的人们使用 Wine 在他们所选择的系统上运行 Windows 软件。
开放源代码和用户驱动的&lt;/p&gt;
&lt;p&gt;Wine 将会永远是自由软件。 大约一半的 Wine 代码由志愿者编写，其余部分由商业公司赞助。特别是 CodeWeavers，出售着一个 Wine 的支持版本。&lt;/p&gt;
&lt;p&gt;Wine 也是高度依赖用户社区的。用户自愿贡献时间在我们的 Application Database 上分享技巧和他们程序的运行测试结果，在我们的 Bug-Tracker 上撰写 bug 报告提醒开发者问题所在，或者在论坛上回复问题。
(来自wine官网 &lt;a class=&#34;link&#34; href=&#34;https://www.winehq.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接&lt;/a&gt;)
(注:无论是最近苹果的游戏打包工具还是安卓的win模拟器,本质上都是wine哦~)&lt;/p&gt;
&lt;h5 id=&#34;关于appimage&#34;&gt;
    &lt;a href=&#34;#%e5%85%b3%e4%ba%8eappimage&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    关于APPIMAGE
&lt;/h5&gt;&lt;p&gt;简单.&lt;/p&gt;
&lt;p&gt;AppImage的核心思想是一个应用程序 = 一个文件 。每个AppImage都包含应用程序以及应用程序运行所需的所有文件。换句话说，除了操作系统本身的基础组件，Appimage不需要依赖包即可运行。&lt;/p&gt;
&lt;p&gt;可靠.&lt;/p&gt;
&lt;p&gt;AppImage 格式是上游应用打包的理想选择，这意味着你可以直接从开发者那里获取软件，而不需要任何中间步骤，这完全符合开发者意图。非常迅速。&lt;/p&gt;
&lt;p&gt;快速.&lt;/p&gt;
&lt;p&gt;AppImage应用可以直接下载并且运行，无需安装，并且不需要root权限。
(来自appimage官网&lt;a class=&#34;link&#34; href=&#34;https://appimage.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;链接&lt;/a&gt;)&lt;/p&gt;
&lt;h5 id=&#34;打包流程&#34;&gt;
    &lt;a href=&#34;#%e6%89%93%e5%8c%85%e6%b5%81%e7%a8%8b&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    打包流程
&lt;/h5&gt;&lt;p&gt;事实上没什么可以讲的,请看图:
&lt;img src=&#34;https://examnple.com/images/2x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;2x.png&#34;
	
	
&gt;
&lt;img src=&#34;https://examnple.com/images/11x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;11x.png&#34;
	
	
&gt;
这个是软件入口,gamux将它指向了文件&amp;quot;$(pwd)/usr/bin/games&amp;quot;(好像还有一种是指向.desktop桌面文件的)&lt;/p&gt;
&lt;h5 id=&#34;我们再来看看脚本内容&#34;&gt;
    &lt;a href=&#34;#%e6%88%91%e4%bb%ac%e5%86%8d%e6%9d%a5%e7%9c%8b%e7%9c%8b%e8%84%9a%e6%9c%ac%e5%86%85%e5%ae%b9&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    我们再来看看脚本内容
&lt;/h5&gt;&lt;p&gt;首先是config,这是一个配置文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

###设置，根据需要修改###
#游戏名称,可以随意起，请务必使用英文，游戏名切勿包含空格及其他符号
GAMUX_GAME_NAME=&amp;#34;GINKA&amp;#34;

#游戏所在文件夹的名称，默认为game
GAMUX_GAME_BIN_DIR=&amp;#34;game&amp;#34;

#game文件夹中游戏执行文件
GAMUX_GAME_EXEC=&amp;#34;run&amp;#34;

#是否启用steam-runtime，0为不启用，1为启用。若不启用，可以删除当前目录的steam-runtime节省游戏体积
#非x86游戏不支持steam-runtime
GAMUX_STEAMRUNTIME=0

#x86平台只支持在64位系统运行，不论游戏是32或64位
#arm平台只支持在arm64系统运行，不论armel、armhf或arm64的游戏
PLATFORM=amd64

###定义变量部分，无需修改###
HERE=$(cd &amp;#34;$(dirname &amp;#34;$0&amp;#34;)&amp;#34;;pwd)
cd &amp;#34;${HERE}&amp;#34;

GAMUX_GAME_READONLY=&amp;#34;${HERE}/${GAMUX_GAME_BIN_DIR}&amp;#34;
GAMUX_GAME_DIR=&amp;#34;${HOME}/.local/share/gamux/${GAMUX_GAME_NAME}&amp;#34;
GAMUX_GAME_DATA=&amp;#34;${GAMUX_GAME_DIR}/data&amp;#34;
GAMUX_GAME_DATA_TMP=&amp;#34;${GAMUX_GAME_DIR}/${GAMUX_GAME_NAME}_gamux_mountdir&amp;#34;

###自定义部分，补充默认脚本的不足###
function gamux_function1() {
#  if [ ! -d &amp;#34;${GAMUX_GAME_READONLY}/characters&amp;#34; ];then
#    tar zxvf &amp;#34;${HERE}/characters.tar.gz&amp;#34; -C &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34;
#  fi
  return 10086
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大佬写的注释挺详细的哈,我们应该向ta学习[笑]
基本上就是定义了游戏名称&amp;quot;GINKA&amp;quot;,游戏所在文件夹&amp;quot;game&amp;quot;,以及&amp;quot;game&amp;quot;文件夹中的可执行文件&amp;quot;run&amp;quot;,其余的对于我们打包而言,意义不大(但是没有shell基础不要乱改哈)&lt;/p&gt;
&lt;p&gt;我们再来看看games&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

source &amp;#34;$(cd &amp;#34;$(dirname &amp;#34;$0&amp;#34;)&amp;#34;;pwd)/config&amp;#34;

&amp;#34;${HERE}&amp;#34;/game_run

fusermount -u -z &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34;
rmdir &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们先来看看第一行#!/bin/bash
这是设定一个解释器,这里是bash,你也可以设置为dash,sh,zsh等
往下看,这是一个经典的当前路径获取代码,获取当前脚本文件的父目录，注意 $0 为脚本执行时传入的脚本路径名,翻译过来就是:打开并运行当前脚本文件父目录下的config脚本,这是配置了环境变量
(关于${HERE},请查看config文件的 ###定义变量部分，无需修改### 部分)
下面两行是挂载与垃圾清理,不重要(其实就是懒,毕竟已经23:01了)&lt;/p&gt;
&lt;p&gt;game_run文件,看名字就知道是干什么的了吧&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash

# figure out the absolute path to the script being run a bit
# non-obvious, the ${0%/*} pulls the path out of $0, cd&amp;#39;s into the
# specified directory, then uses $PWD to figure out where that
# directory lives - and all this in a subshell, so we don&amp;#39;t affect
# $PWD

source &amp;#34;$(cd &amp;#34;$(dirname &amp;#34;$0&amp;#34;)&amp;#34;;pwd)/config&amp;#34;

if [ ! -d &amp;#34;${GAMUX_GAME_DATA}&amp;#34; ];then
  mkdir -p &amp;#34;${GAMUX_GAME_DATA}&amp;#34;
fi

if [ ! -d &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34; ];then
  mkdir &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34;
fi

UNIONFS=&amp;#34;unionfs_${PLATFORM}&amp;#34;

&amp;#34;${HERE}&amp;#34;/${UNIONFS} -o big_writes,umask=0002,direct_io,auto_cache,sync_read,nonempty,uid=$(id -u),gid=$(id -g),cow &amp;#34;${GAMUX_GAME_DATA}&amp;#34;=RW:&amp;#34;${GAMUX_GAME_READONLY}&amp;#34;=RO ${GAMUX_GAME_DATA_TMP}

#自定义代码
gamux_function1

###############################################################################################

#启动游戏
cd &amp;#34;${GAMUX_GAME_DATA_TMP}&amp;#34;

if [ ${GAMUX_STEAMRUNTIME} -eq 0 ];then 
  &amp;#34;${GAMUX_GAME_DATA_TMP}/${GAMUX_GAME_EXEC}&amp;#34; &amp;#34;$@&amp;#34;
else
  &amp;#34;${HERE}/steam-runtime/run.sh&amp;#34; &amp;#34;${GAMUX_GAME_DATA_TMP}/${GAMUX_GAME_EXEC}&amp;#34; &amp;#34;$@&amp;#34;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来就是我自己写的脚本了,位于game文件夹中的run脚本,&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/sh

export WINEHOME=$(pwd)
export WINEPREFIX=$(pwd)/C
#export WINEARCH=none
export WINE=./bin/wine 
$WINE game/run.exe
export WINEDLLPATH=$(pwd)/lib/wine/i386-windows/:$(pwd)/lib/wine/x86_64-windows/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;非常简单的几句代码,分别设定了wine主目录的环境变量,wine c盘的环境变量,wine的架构(没有设定,为none),以及wine的可执行程序
&lt;img src=&#34;https://examnple.com/images/9x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;9x.png&#34;
	
	
&gt;
$WINE game/run.exe (用wine运行game目录下的run.exe)
&lt;img src=&#34;https://examnple.com/images/3x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;3x.png&#34;
	
	
&gt;
&lt;img src=&#34;https://examnple.com/images/8x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;8x.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;打包&#34;&gt;
    &lt;a href=&#34;#%e6%89%93%e5%8c%85&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    打包
&lt;/h3&gt;&lt;p&gt;打包之前要注意以下几点:
1.在此之前先运行一下games文件,检查game/C 文件夹是否有以下文件,没有就失败了(可以运行,但喜提 -1GB空间,你可以理解为这是优化)
&lt;img src=&#34;https://examnple.com/images/10x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;10x.png&#34;
	
	
&gt;
2.一个game.png文件推荐256x256(不是也行)
3.编辑desktop
&lt;img src=&#34;https://examnple.com/images/5x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;5x.png&#34;
	
	
&gt;
附赠desktop文件内容(以免损坏)&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[Desktop Entry]
Name=GINKA
Exec=games
Icon=game
Type=Application
Categories=Game;
Comment=
Path=
Terminal=false
StartupNotify=false
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;开始打包&#34;&gt;
    &lt;a href=&#34;#%e5%bc%80%e5%a7%8b%e6%89%93%e5%8c%85&#34; class=&#34;header-anchor&#34;&gt;#&lt;/a&gt;
    开始打包
&lt;/h2&gt;&lt;p&gt;准备好appimagetool.appimage,在此打开终端,输入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ARCH=x86_64 ./appimagetool-x86_64.AppImage squashfs-root GINKA.Appimage
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解释:
[ARCH=架构] [运行appimagetool] [参数1:所要打包的文件夹] [参数2:打包成什么]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://examnple.com/images/4x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;4x.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;出现以下场景就成功了
&lt;img src=&#34;https://examnple.com/images/1x.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;1x.png&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;作者的小声哔哔:写这个时候才21:20左右,现在是23:34了,现在脑子一团糟,文章后期也开始偷懒,有什么纰漏请见谅&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>测试</title>
        <link>https://examnple.com/posts/%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Sun, 31 Dec 2023 00:00:00 +0000</pubDate>
        
        <guid>https://examnple.com/posts/%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;p&gt;测试文档&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://examnple.com/images/0.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;测试&#34;
	
	
&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
